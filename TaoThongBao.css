.toast {
    display: flex;
    align-items: center;
    /* căn giữa cho các item trong box */
    padding: 16px auto;
    background-color: #ffff;
    border-left: 4px groove rgb(10, 10, 10);
    box-shadow: 0 5px 8px #9e9a9a;
    min-width: 400px;
    margin-top: 36px;
    cursor: pointer;
    /* position: fixed;
    right: 0;
    top: 0; */
   animation: show 0.3s ease, hide 1s 3s ease forwards;
    transition: all linear 0.3s ;
    /* thêm vào để xét all các hiệu ứng để làm mượt */
  
   /* animation: show ease 0.3s, hide linear 1s 3s forwards */
   /* dòng này nghĩa là gọi keyframes tên là show hiển thị trong 0.3s theo 
   kiểu ease sau đó gọi keyframes hide sẽ làm mờ khối trong 1s và
   biến mất sau 3s () */
   /* --- ở đây ta thêm forwards vào để dừng sự kiện ở keyframes tên hide
   ---nếu k xét thuộc tính này thì khi nó chạy hết keyframes hide thì nó sẽ
   trở về css ban đầu  */
    /* linear để ẩn đều đi làm mượt hiệu ứng, 3s la khoảng thời gian kết thúc hiệu ứng
     , thêm forwards vào để nó dừng ở điểm cuối của animation có nghĩa
     là khi chạy đến opacity bằng 0 thì nó dừng luôn ở đó*/


}
#toast{
    position:fixed ;
    top: 0;
    right: 0;
    z-index: 99999;
    /* xét cách hiển thị theo trục z của các khối */
    /* xét giá trị càng cao để tránh trường hợp các box đề lên nhau */


}


@keyframes show {
    from {
        opacity: 0;
        transform: translateX(100%);
        /* dịch chuyển block(khối) sang theo trục x là 100% của block */
    }

    to {
        opacity: 1;
        transform: translateX(0);
        /* dùng opacity để hiển khối và
        khối sẽ trượt từ translateX(100%) tới 0 ra ngoài màn hình */
    }
   

}

@keyframes hide {

    to {
        opacity: 0;
    }
}
/*  tại vì ở trên opacity : 1 , tức là đã hiển thị rồi nên ta k cần phải xét lại
nên chỉ cần xét cho nó ẩn đi thoi

--kịch bản-- khi nhấn vào button thì tb hiện ra và sau một hười gian sẽ tự động mất đi
 */


.toast__icon {
    padding: 16px;
    font-size: 24px;
    color: rgb(7, 7, 7);
}

.toast--error .toast__icon{
    color:#ff3d3d;
}
.toast--error{
    border-color:#ff3d3d; ;
}
.toast--success{
    border-color:#3dff3d;
}
.toast--warning{
    border-color:#fffc3d;
}
.toast--info{
    border-color:#3d40ff;
}
.toast--success .toast__icon{
    color:#3dff3d;
}
.toast--warning .toast__icon{
    color:#fffc3d;
}
.toast--info .toast__icon{
    color:#3d4aff;
}

.toast__body {
    flex-grow:1;

}

.toast__close {
    padding: 0 16px;
    font-size: 20px;
    color: rgba(0, 0, 0, 0.3);

}

.toast__close:hover {
    color: rgba(8, 8, 8);
}

.toast__title {
    font-size: 24px;
    font-weight: 600px;

}

.toast__msg {
    font-size: 14px;
    color: rgb(89, 85, 85);
   
}


.btn {
    display: inline-block;
    text-decoration: none;
    /* làm mất dấu gạch dưới khi đặt thẻ a */
    color: rgb(250, 248, 248);
    padding: 8px 40px;
    font-weight: 700;
    border-radius: 15px;
    cursor: pointer;
    /* hiển thị bàn tay khi di chuột vào button  */
    transition: opacity 0.2s ease-in;
    /* xét hiệu ứng cho thuộc tính opacity là 0.2s  */

}

/* css khoảng cách cho 2 btn cạnh nhau phía trước có 1 btn */
.btn+.btn {
    margin-left: 20px;
    margin-top: 20px;
}
.btn--success{
        background-color:#71be34;
    }
.btn--error{
        background-color: #ff623d;
     }
.btn--warning{
        background-color: #f2ff3d;
     }
.btn--info{
        background-color: #3d50ff;
     }
/*  xét vị trí của btn*/
.vt{
    margin-top: 500px;
    margin-left: 150px;
   
    
}

